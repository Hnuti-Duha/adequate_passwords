<?php

/**
 * @file
 * The adequate passwords module file.
 */

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_element_info_alter().
 */
function adequate_passwords_element_info_alter(array &$info) {
  if (isset($info['password_confirm'])) {
    $info['password_confirm']['#after_build'][] = 'adequate_passwords_after_build';
  }
}

/**
 * After build function for password_confirm elements.
 *
 * @param array $element
 *   The element being altered after build.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form_state object returned with the element.
 */
function adequate_passwords_after_build(array $element, FormStateInterface $form_state) {
  // Adequate Password validate should come before other validate functions.
  array_unshift($element['#element_validate'], 'adequate_passwords_validate');

  return $element;
}

/**
 * Element validate function for password_confirm elements.
 *
 * @param array $element
 *   The element being validated.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form_state object returned with the element.
 */
function adequate_passwords_validate(array $element, FormStateInterface $form_state) {
  // When installing the site via CLI, Drupal will generate a random password.
  // Do not validate the random password so as to not break site installation.
  if ($form_state->getFormObject()->getFormId() == 'install_configure_form'
    && PHP_SAPI === 'cli') {
    return;
  }
  $config = \Drupal::config('adequate_passwords.settings');

  $min_strength = $config->get('strength');
  $required_roles = $config->get('roles');

  $roles = array_keys(array_filter($form_state->getValue('roles')));

  if (empty(array_intersect($required_roles, $roles))) {
    return;
  }

  $value = $element['pass1']['#value'];

  if (!empty($value) && !empty($min_strength)) {

    $password_settings = [
      'username' => $form_state->get('name'),
    ];

    [$strength, $messages] = adequate_passwords_evaluate_password_strength($value, $password_settings);

    if ($strength < $min_strength) {
      $error = new FormattableMarkup(t('Please choose a stronger password. Current strength: @score. Minimum: @min. Recommendations to make your password stronger:', [
        '@score' => $strength,
        '@min' => $min_strength,
      ]) . '<ul><li>' . implode('</li><li>', $messages) . '</li></ul>', []);
      $form_state->setErrorByName('pass1', $error);
    }
    else {
      \Drupal::messenger()->addMessage(t('Password strength: @score. Minimum: @min.', [
        '@score' => $strength,
        '@min' => $min_strength
      ]));
    }
  }
}

/**
 * Evaluate password strength
 *
 * This is functionally equivalent to Drupal.evaluatePasswordStrength in user.js.
 *
 * @param string $password
 * @param array $password_settings
 *
 * @return array
 *   Password strength integer and an array of messages to improve the password.
 */
function adequate_passwords_evaluate_password_strength($password, array $password_settings) {
  $password = trim($password);
  $weaknesses = 0;
  $strength = 100;
  $messages = [];

  $has_lowercase = preg_match('/[a-z]+/', $password);
  $has_uppercase = preg_match('/[A-Z]+/', $password);
  $has_numbers = preg_match('/[0-9]+/', $password);
  $has_punctuation = preg_match('/[^a-zA-Z0-9]+/', $password);

  $username = $password_settings['username'];
  $password_length = strlen($password);

  // Lose 5 points for every character less than 12, plus a 30 point penalty.
  if ($password_length < 12) {
    $messages[] = t('Make it at least 12 characters');
    $strength -= (12 - $password_length) * 5 + 30;
  }

  // Count weaknesses.
  if (!$has_lowercase) {
    $messages[] = t('Add lowercase letters');
    $weaknesses += 1;
  }
  if (!$has_uppercase) {
    $messages[] = t('Add uppercase letters');
    $weaknesses += 1;
  }
  if (!$has_numbers) {
    $messages[] = t('Add numbers');
    $weaknesses += 1;
  }
  if (!$has_punctuation) {
    $messages[] = t('Add punctuation');
    $weaknesses += 1;
  }

  // Apply penalty for each weakness (balanced against length penalty).
  switch ($weaknesses) {
    case 1:
      $strength -= 12.5;
      break;

    case 2:
      $strength -= 25;
      break;

    case 3:
    case 4:
      $strength -= 40;
      break;
  }

  // Check if password is the same as the username.
  if (mb_strtolower($password) == mb_strtolower($username)) {
    $messages[] = t('Make it different from your username');
    $strength = 5;
  }

  return [$strength, $messages];
}
